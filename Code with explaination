
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score
from tensorflow import keras
from tensorflow.keras import layers

# Step 1: Load the dataset
data = pd.read_csv('employee_gait_data.csv')

# Step 2: Preprocessing
# Assume data is already preprocessed and features are extracted

# Step 3: Split data into features (X) and target (y)
X = data.drop('employee_id', axis=1)  # Assuming 'employee_id' is not a feature
y = data['employee_id']

# Step 4: Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Step 5: Build a Random Forest model
rf_model = RandomForestClassifier(n_estimators=100, random_state=42)
rf_model.fit(X_train, y_train)

# Step 6: Evaluate the Random Forest model
rf_predictions = rf_model.predict(X_test)
rf_accuracy = accuracy_score(y_test, rf_predictions)
print("Random Forest Accuracy:", rf_accuracy)

# Step 7: Build a deep learning model using TensorFlow/Keras
input_dim = X_train.shape[1]
num_classes = len(y.unique())

dl_model = keras.Sequential([
    layers.Dense(64, activation='relu', input_shape=(input_dim,)),
    layers.Dense(32, activation='relu'),
    layers.Dense(num_classes, activation='softmax')
])

dl_model.compile(optimizer='adam',
                  loss='sparse_categorical_crossentropy',
                  metrics=['accuracy'])

# Train the model
dl_model.fit(X_train, y_train, epochs=10, batch_size=32, validation_split=0.2)

# Step 8: Evaluate the deep learning model
dl_loss, dl_accuracy = dl_model.evaluate(X_test, y_test)
print("Deep Learning Accuracy:", dl_accuracy)
